import {
  Box,
  Button,
  Checkbox,
  Container,
  Flex,
  Heading,
  HStack,
  Input,
  useToast,
  VStack,
} from "@chakra-ui/react";
import Head from "next/head";
import { useMemo, useState } from "react";

import content from "./data.json";

interface Data {
  id: string;
  nome: string;
  size: number;
}

function formatBytes(bytes: number, decimals = 2) {
  if (!+bytes) return "0 Bytes";

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}

export default function Home() {
  const toast = useToast();

  const [gamesSelecteds, setGamesSelecteds] = useState<Data[]>([]);
  const [searchGame, setSearchGame] = useState("");
  const [name, setName] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const games: Data[] = useMemo(() => {
    return content.filter(
      (game) =>
        !gamesSelecteds.some((gameSelected) => gameSelected.id === game.id) &&
        (searchGame.length === 0 ||
          game.nome.toLowerCase().includes(searchGame.toLowerCase()))
    );
  }, [gamesSelecteds, searchGame]);

  const sizeTotalOfGamesSelecteds = useMemo(() => {
    return gamesSelecteds.reduce((total, game) => total + game.size, 0);
  }, [gamesSelecteds]);

  const handleSendMessage = async () => {
    setIsLoading(true);

    const gamesText = gamesSelecteds
      .map((game) => `${game.nome} - ${formatBytes(game.size)}`)
      .join("\n");

    const text = `CLIENTE\n\n${name}\n\nJOGOS - ${formatBytes(
      sizeTotalOfGamesSelecteds
    )}\n\n${gamesText}`;

    fetch(
      encodeURI(
        `https://api.telegram.org/bot${process.env.NEXT_PUBLIC_BOT_TOKEN}/sendMessage?chat_id=${process.env.NEXT_PUBLIC_CHAT_ID}&text=${text}`
      ),
      {
        method: "POST",
      }
    )
      .then((data) => {
        if (data.status >= 400) {
          toast({
            description: "Falha ao fazer o pedido. Tente novamente em breve",
            status: "error",
            position: "top-right",
            duration: 5000,
          });
        } else {
          toast({
            description: "Pedido feito com sucesso!!",
            status: "success",
            position: "top-right",
            duration: 5000,
          });
          setName("");
          setSearchGame("");
          setGamesSelecteds([]);
        }
      })
      .catch(() =>
        toast({
          description: "Falha ao fazer o pedido. Tente novamente em breve",
          status: "error",
          position: "top-right",
          duration: 5000,
        })
      )
      .finally(() => {
        setIsLoading(false);
      });
  };

  return (
    <>
      <Head>
        <title>Cyber do Gilberto</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="100ch">
        {gamesSelecteds.length > 0 ? (
          // <Box position="sticky" top="0" bg="background" zIndex={10}>
          <Box>
            <Heading mt={4} color="primary.500" textAlign="left">
              Jogos Selecionados
            </Heading>
            <Heading fontSize="xl" mt={4} color="primary.500" textAlign="left">
              Tamanho total - {formatBytes(sizeTotalOfGamesSelecteds)}
            </Heading>
            <VStack alignItems="flex-start" gap={2} mt={6}>
              {gamesSelecteds.map((game) => (
                <Checkbox
                  key={game.id}
                  isChecked={true}
                  onChange={(_) =>
                    setGamesSelecteds((prev) =>
                      prev.filter((gameSelected) => gameSelected.id !== game.id)
                    )
                  }
                >
                  {game.nome} - {formatBytes(game.size)}
                </Checkbox>
              ))}
            </VStack>
          </Box>
        ) : null}
        <Heading mt={4} color="primary.500" textAlign="left">
          Escolha os jogos
        </Heading>
        <Input
          value={searchGame}
          onChange={(e) => setSearchGame(e.target.value)}
          placeholder="Pesquisar jogo"
          mt={6}
        />
        <VStack alignItems="flex-start" gap={2} mt={6}>
          {games.map((game, index) => (
            <Checkbox
              key={game.id}
              isChecked={gamesSelecteds.some(
                (gameSelected) => gameSelected.id === game.id
              )}
              onChange={(_) => setGamesSelecteds((prev) => [...prev, game])}
            >
              {game.nome} - {formatBytes(game.size)}
            </Checkbox>
          ))}
        </VStack>
      </Container>
      <Flex
        zIndex={99999}
        width="100%"
        as="footer"
        position="fixed"
        bottom={0}
        p={6}
        align="center"
        justify="center"
        bg="background"
        direction="column"
        borderTop="solid 1px white"
      >
        <HStack>
          <Input
            flex={1}
            h={50}
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Nome"
          />
          <Button
            h={50}
            px={2}
            isLoading={isLoading}
            onClick={() => {
              if (!name) {
                return toast({
                  description: "Informe seu nome.",
                  status: "warning",
                  position: "top-right",
                  duration: 2000,
                });
              } else if (!gamesSelecteds.length) {
                return toast({
                  description: "Seleciona pelo menos um jogo.",
                  status: "warning",
                  position: "top-right",
                  duration: 2000,
                });
              } else {
                handleSendMessage();
              }
            }}
          >
            Enviar pedido
          </Button>
        </HStack>
      </Flex>
    </>
  );
}
